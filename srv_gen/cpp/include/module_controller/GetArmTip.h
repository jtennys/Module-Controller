/* Auto-generated by genmsg_cpp for file /home/jason/ros_packages/module_controller/srv/GetArmTip.srv */
#ifndef MODULE_CONTROLLER_SERVICE_GETARMTIP_H
#define MODULE_CONTROLLER_SERVICE_GETARMTIP_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace module_controller
{
template <class ContainerAllocator>
struct GetArmTipRequest_ : public ros::Message
{
  typedef GetArmTipRequest_<ContainerAllocator> Type;

  GetArmTipRequest_()
  : Nothing(0)
  {
  }

  GetArmTipRequest_(const ContainerAllocator& _alloc)
  : Nothing(0)
  {
  }

  typedef int8_t _Nothing_type;
  int8_t Nothing;


private:
  static const char* __s_getDataType_() { return "module_controller/GetArmTipRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "614b939b5fa1fbf0c2d50eee578a4e28"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "be5e429ef59289bd2dccbf657856fbfc"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 Nothing\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, Nothing);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, Nothing);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(Nothing);
    return size;
  }

  typedef boost::shared_ptr< ::module_controller::GetArmTipRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::module_controller::GetArmTipRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct GetArmTipRequest
typedef  ::module_controller::GetArmTipRequest_<std::allocator<void> > GetArmTipRequest;

typedef boost::shared_ptr< ::module_controller::GetArmTipRequest> GetArmTipRequestPtr;
typedef boost::shared_ptr< ::module_controller::GetArmTipRequest const> GetArmTipRequestConstPtr;


template <class ContainerAllocator>
struct GetArmTipResponse_ : public ros::Message
{
  typedef GetArmTipResponse_<ContainerAllocator> Type;

  GetArmTipResponse_()
  : x(0.0)
  , y(0.0)
  , z(0.0)
  {
  }

  GetArmTipResponse_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , z(0.0)
  {
  }

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _z_type;
  float z;


private:
  static const char* __s_getDataType_() { return "module_controller/GetArmTipResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "cc153912f1453b708d221682bc23d9ac"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "be5e429ef59289bd2dccbf657856fbfc"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 x\n\
float32 y\n\
float32 z\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    ros::serialization::serialize(stream, z);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    ros::serialization::deserialize(stream, z);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    size += ros::serialization::serializationLength(z);
    return size;
  }

  typedef boost::shared_ptr< ::module_controller::GetArmTipResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::module_controller::GetArmTipResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct GetArmTipResponse
typedef  ::module_controller::GetArmTipResponse_<std::allocator<void> > GetArmTipResponse;

typedef boost::shared_ptr< ::module_controller::GetArmTipResponse> GetArmTipResponsePtr;
typedef boost::shared_ptr< ::module_controller::GetArmTipResponse const> GetArmTipResponseConstPtr;

struct GetArmTip
{

typedef GetArmTipRequest Request;
typedef GetArmTipResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetArmTip
} // namespace module_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::module_controller::GetArmTipRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "614b939b5fa1fbf0c2d50eee578a4e28";
  }

  static const char* value(const  ::module_controller::GetArmTipRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x614b939b5fa1fbf0ULL;
  static const uint64_t static_value2 = 0xc2d50eee578a4e28ULL;
};

template<class ContainerAllocator>
struct DataType< ::module_controller::GetArmTipRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "module_controller/GetArmTipRequest";
  }

  static const char* value(const  ::module_controller::GetArmTipRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::module_controller::GetArmTipRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 Nothing\n\
\n\
";
  }

  static const char* value(const  ::module_controller::GetArmTipRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::module_controller::GetArmTipRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::module_controller::GetArmTipResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cc153912f1453b708d221682bc23d9ac";
  }

  static const char* value(const  ::module_controller::GetArmTipResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcc153912f1453b70ULL;
  static const uint64_t static_value2 = 0x8d221682bc23d9acULL;
};

template<class ContainerAllocator>
struct DataType< ::module_controller::GetArmTipResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "module_controller/GetArmTipResponse";
  }

  static const char* value(const  ::module_controller::GetArmTipResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::module_controller::GetArmTipResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 x\n\
float32 y\n\
float32 z\n\
\n\
\n\
";
  }

  static const char* value(const  ::module_controller::GetArmTipResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::module_controller::GetArmTipResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::module_controller::GetArmTipRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Nothing);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetArmTipRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::module_controller::GetArmTipResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetArmTipResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<module_controller::GetArmTip> {
  static const char* value() 
  {
    return "be5e429ef59289bd2dccbf657856fbfc";
  }

  static const char* value(const module_controller::GetArmTip&) { return value(); } 
};

template<>
struct DataType<module_controller::GetArmTip> {
  static const char* value() 
  {
    return "module_controller/GetArmTip";
  }

  static const char* value(const module_controller::GetArmTip&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<module_controller::GetArmTipRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "be5e429ef59289bd2dccbf657856fbfc";
  }

  static const char* value(const module_controller::GetArmTipRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<module_controller::GetArmTipRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "module_controller/GetArmTip";
  }

  static const char* value(const module_controller::GetArmTipRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<module_controller::GetArmTipResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "be5e429ef59289bd2dccbf657856fbfc";
  }

  static const char* value(const module_controller::GetArmTipResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<module_controller::GetArmTipResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "module_controller/GetArmTip";
  }

  static const char* value(const module_controller::GetArmTipResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MODULE_CONTROLLER_SERVICE_GETARMTIP_H

