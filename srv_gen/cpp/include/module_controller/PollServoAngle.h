/* Auto-generated by genmsg_cpp for file /home/jason/ros_packages/module_controller/srv/PollServoAngle.srv */
#ifndef MODULE_CONTROLLER_SERVICE_POLLSERVOANGLE_H
#define MODULE_CONTROLLER_SERVICE_POLLSERVOANGLE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace module_controller
{
template <class ContainerAllocator>
struct PollServoAngleRequest_ : public ros::Message
{
  typedef PollServoAngleRequest_<ContainerAllocator> Type;

  PollServoAngleRequest_()
  : ID(0)
  {
  }

  PollServoAngleRequest_(const ContainerAllocator& _alloc)
  : ID(0)
  {
  }

  typedef int8_t _ID_type;
  int8_t ID;


private:
  static const char* __s_getDataType_() { return "module_controller/PollServoAngleRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0cb5143ed23a5de01874507c8711c4d5"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "58742bd1a1a5aa07bee05a873ed0f9aa"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 ID\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, ID);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, ID);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(ID);
    return size;
  }

  typedef boost::shared_ptr< ::module_controller::PollServoAngleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::module_controller::PollServoAngleRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct PollServoAngleRequest
typedef  ::module_controller::PollServoAngleRequest_<std::allocator<void> > PollServoAngleRequest;

typedef boost::shared_ptr< ::module_controller::PollServoAngleRequest> PollServoAngleRequestPtr;
typedef boost::shared_ptr< ::module_controller::PollServoAngleRequest const> PollServoAngleRequestConstPtr;


template <class ContainerAllocator>
struct PollServoAngleResponse_ : public ros::Message
{
  typedef PollServoAngleResponse_<ContainerAllocator> Type;

  PollServoAngleResponse_()
  : angle(0.0)
  {
  }

  PollServoAngleResponse_(const ContainerAllocator& _alloc)
  : angle(0.0)
  {
  }

  typedef float _angle_type;
  float angle;


private:
  static const char* __s_getDataType_() { return "module_controller/PollServoAngleResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "2d11dcdbe5a6f73dd324353dc52315ab"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "58742bd1a1a5aa07bee05a873ed0f9aa"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 angle\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, angle);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, angle);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(angle);
    return size;
  }

  typedef boost::shared_ptr< ::module_controller::PollServoAngleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::module_controller::PollServoAngleResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct PollServoAngleResponse
typedef  ::module_controller::PollServoAngleResponse_<std::allocator<void> > PollServoAngleResponse;

typedef boost::shared_ptr< ::module_controller::PollServoAngleResponse> PollServoAngleResponsePtr;
typedef boost::shared_ptr< ::module_controller::PollServoAngleResponse const> PollServoAngleResponseConstPtr;

struct PollServoAngle
{

typedef PollServoAngleRequest Request;
typedef PollServoAngleResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PollServoAngle
} // namespace module_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::module_controller::PollServoAngleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0cb5143ed23a5de01874507c8711c4d5";
  }

  static const char* value(const  ::module_controller::PollServoAngleRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0cb5143ed23a5de0ULL;
  static const uint64_t static_value2 = 0x1874507c8711c4d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::module_controller::PollServoAngleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "module_controller/PollServoAngleRequest";
  }

  static const char* value(const  ::module_controller::PollServoAngleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::module_controller::PollServoAngleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 ID\n\
\n\
";
  }

  static const char* value(const  ::module_controller::PollServoAngleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::module_controller::PollServoAngleRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::module_controller::PollServoAngleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2d11dcdbe5a6f73dd324353dc52315ab";
  }

  static const char* value(const  ::module_controller::PollServoAngleResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2d11dcdbe5a6f73dULL;
  static const uint64_t static_value2 = 0xd324353dc52315abULL;
};

template<class ContainerAllocator>
struct DataType< ::module_controller::PollServoAngleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "module_controller/PollServoAngleResponse";
  }

  static const char* value(const  ::module_controller::PollServoAngleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::module_controller::PollServoAngleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 angle\n\
\n\
\n\
";
  }

  static const char* value(const  ::module_controller::PollServoAngleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::module_controller::PollServoAngleResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::module_controller::PollServoAngleRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ID);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PollServoAngleRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::module_controller::PollServoAngleResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.angle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PollServoAngleResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<module_controller::PollServoAngle> {
  static const char* value() 
  {
    return "58742bd1a1a5aa07bee05a873ed0f9aa";
  }

  static const char* value(const module_controller::PollServoAngle&) { return value(); } 
};

template<>
struct DataType<module_controller::PollServoAngle> {
  static const char* value() 
  {
    return "module_controller/PollServoAngle";
  }

  static const char* value(const module_controller::PollServoAngle&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<module_controller::PollServoAngleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "58742bd1a1a5aa07bee05a873ed0f9aa";
  }

  static const char* value(const module_controller::PollServoAngleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<module_controller::PollServoAngleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "module_controller/PollServoAngle";
  }

  static const char* value(const module_controller::PollServoAngleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<module_controller::PollServoAngleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "58742bd1a1a5aa07bee05a873ed0f9aa";
  }

  static const char* value(const module_controller::PollServoAngleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<module_controller::PollServoAngleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "module_controller/PollServoAngle";
  }

  static const char* value(const module_controller::PollServoAngleResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MODULE_CONTROLLER_SERVICE_POLLSERVOANGLE_H

