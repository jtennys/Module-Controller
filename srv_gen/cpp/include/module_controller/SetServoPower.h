/* Auto-generated by genmsg_cpp for file /home/jason/ros_packages/module_controller/srv/SetServoPower.srv */
#ifndef MODULE_CONTROLLER_SERVICE_SETSERVOPOWER_H
#define MODULE_CONTROLLER_SERVICE_SETSERVOPOWER_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace module_controller
{
template <class ContainerAllocator>
struct SetServoPowerRequest_ : public ros::Message
{
  typedef SetServoPowerRequest_<ContainerAllocator> Type;

  SetServoPowerRequest_()
  : ID(0)
  , Power(0)
  {
  }

  SetServoPowerRequest_(const ContainerAllocator& _alloc)
  : ID(0)
  , Power(0)
  {
  }

  typedef int8_t _ID_type;
  int8_t ID;

  typedef int8_t _Power_type;
  int8_t Power;


private:
  static const char* __s_getDataType_() { return "module_controller/SetServoPowerRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "78b1896cc68774f69c9a1ff825cb9e38"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "06dffc0971a8a6f261fa12c9016dc041"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 ID\n\
int8 Power\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, ID);
    ros::serialization::serialize(stream, Power);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, ID);
    ros::serialization::deserialize(stream, Power);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(ID);
    size += ros::serialization::serializationLength(Power);
    return size;
  }

  typedef boost::shared_ptr< ::module_controller::SetServoPowerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::module_controller::SetServoPowerRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct SetServoPowerRequest
typedef  ::module_controller::SetServoPowerRequest_<std::allocator<void> > SetServoPowerRequest;

typedef boost::shared_ptr< ::module_controller::SetServoPowerRequest> SetServoPowerRequestPtr;
typedef boost::shared_ptr< ::module_controller::SetServoPowerRequest const> SetServoPowerRequestConstPtr;


template <class ContainerAllocator>
struct SetServoPowerResponse_ : public ros::Message
{
  typedef SetServoPowerResponse_<ContainerAllocator> Type;

  SetServoPowerResponse_()
  : Success(0)
  {
  }

  SetServoPowerResponse_(const ContainerAllocator& _alloc)
  : Success(0)
  {
  }

  typedef int8_t _Success_type;
  int8_t Success;


private:
  static const char* __s_getDataType_() { return "module_controller/SetServoPowerResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1a8c06f1b4403f4bedd5ebdeca1af0dd"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "06dffc0971a8a6f261fa12c9016dc041"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 Success\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, Success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, Success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(Success);
    return size;
  }

  typedef boost::shared_ptr< ::module_controller::SetServoPowerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::module_controller::SetServoPowerResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct SetServoPowerResponse
typedef  ::module_controller::SetServoPowerResponse_<std::allocator<void> > SetServoPowerResponse;

typedef boost::shared_ptr< ::module_controller::SetServoPowerResponse> SetServoPowerResponsePtr;
typedef boost::shared_ptr< ::module_controller::SetServoPowerResponse const> SetServoPowerResponseConstPtr;

struct SetServoPower
{

typedef SetServoPowerRequest Request;
typedef SetServoPowerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetServoPower
} // namespace module_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::module_controller::SetServoPowerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "78b1896cc68774f69c9a1ff825cb9e38";
  }

  static const char* value(const  ::module_controller::SetServoPowerRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x78b1896cc68774f6ULL;
  static const uint64_t static_value2 = 0x9c9a1ff825cb9e38ULL;
};

template<class ContainerAllocator>
struct DataType< ::module_controller::SetServoPowerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "module_controller/SetServoPowerRequest";
  }

  static const char* value(const  ::module_controller::SetServoPowerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::module_controller::SetServoPowerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 ID\n\
int8 Power\n\
\n\
";
  }

  static const char* value(const  ::module_controller::SetServoPowerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::module_controller::SetServoPowerRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::module_controller::SetServoPowerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1a8c06f1b4403f4bedd5ebdeca1af0dd";
  }

  static const char* value(const  ::module_controller::SetServoPowerResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1a8c06f1b4403f4bULL;
  static const uint64_t static_value2 = 0xedd5ebdeca1af0ddULL;
};

template<class ContainerAllocator>
struct DataType< ::module_controller::SetServoPowerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "module_controller/SetServoPowerResponse";
  }

  static const char* value(const  ::module_controller::SetServoPowerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::module_controller::SetServoPowerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 Success\n\
\n\
\n\
";
  }

  static const char* value(const  ::module_controller::SetServoPowerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::module_controller::SetServoPowerResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::module_controller::SetServoPowerRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ID);
    stream.next(m.Power);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetServoPowerRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::module_controller::SetServoPowerResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetServoPowerResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<module_controller::SetServoPower> {
  static const char* value() 
  {
    return "06dffc0971a8a6f261fa12c9016dc041";
  }

  static const char* value(const module_controller::SetServoPower&) { return value(); } 
};

template<>
struct DataType<module_controller::SetServoPower> {
  static const char* value() 
  {
    return "module_controller/SetServoPower";
  }

  static const char* value(const module_controller::SetServoPower&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<module_controller::SetServoPowerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "06dffc0971a8a6f261fa12c9016dc041";
  }

  static const char* value(const module_controller::SetServoPowerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<module_controller::SetServoPowerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "module_controller/SetServoPower";
  }

  static const char* value(const module_controller::SetServoPowerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<module_controller::SetServoPowerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "06dffc0971a8a6f261fa12c9016dc041";
  }

  static const char* value(const module_controller::SetServoPowerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<module_controller::SetServoPowerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "module_controller/SetServoPower";
  }

  static const char* value(const module_controller::SetServoPowerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MODULE_CONTROLLER_SERVICE_SETSERVOPOWER_H

